[{"id":3,"kind":"big_project","name":"Corewar","x":3891.0,"y":3000.0,"by":[{"parent_id":0,"points":[[3890.5,3000],[4037.5,3002]]}],"project_id":22,"difficulty":375,"duration":"about 0 days","rules":"You must have validated 1 of lem_in, first-internship, and startup-internship","description":"Ce projet vous invite à créer une arène virtuelle et à y faire s’affronter des programmes codés dans un langage simpliste. Vous allez ainsi aborder la conception d’une VM (avec les instructions qu’elle reconnait, les registres, etc), et les problématiques de compilation d’un langage assembleur en bytecode. Avec, en bonus, le plaisir de faire s’affronter vos champions sur votre arène !","slug":"corewar"},{"id":27,"kind":"project","name":"Wolf3d","x":2898.0,"y":3678.0,"by":[{"parent_id":15,"points":[[3003,3444],[2898,3678]]}],"project_id":8,"difficulty":225,"duration":"about 14 days","rules":"You must have validated 1 of fract-ol, first-internship, and startup-internship","description":"Inspiré du célèbre jeu éponyme des années 90 qui fut le premier First Person Shooter, ce projet vous permet d'aborder la technique du ray-casting. Votre but sera de représenter une vue dynamique à l'intérieur d'un labyrinthe dans lequel on peut se déplacer.","slug":"wolf3d"},{"id":28,"kind":"project","name":"RTv1","x":3109.0,"y":3673.0,"by":[{"parent_id":15,"points":[[3003.5,3444.5],[3109,3673]]}],"project_id":23,"difficulty":225,"duration":"about 14 days","rules":"You must have validated 1 of fract-ol, first-internship, and startup-internship","description":"Découvrez les principes fondamentaux du Raytracing : la création d'images de synthèses par ordinateur. Ce premier projet vous fera réaliser des scènes simples impliquant des objets et des lumières non complexes.","slug":"rtv1"},{"id":35,"kind":"project","name":"ft_ls","x":2999.0,"y":2800.0,"by":[{"parent_id":540,"points":[[3001,2793],[3002,3005]]}],"project_id":3,"difficulty":100,"duration":"about 7 days","rules":"You must have validated get_next_line and fillit","description":"Pour tout connaitre du filesystem, de la façon dont sont rangés les fichiers et répertoires, codez par vous-même une des commandes les plus utilisées : ls .","slug":"ft_ls"},{"id":38,"kind":"project","name":"ft_select","x":2800.0,"y":2450.0,"by":[{"parent_id":7,"points":[[2999,2591],[3000,2450]]},{"parent_id":7,"points":[[3000,2450],[2800,2450]]}],"project_id":33,"difficulty":100,"duration":"about 7 days","rules":"You must have validated 1 of minishell, first-internship, and startup-internship","description":"Ce projet a pour but de vous initier à la manipulation du terminal avec les termcaps. Vous allez ici apprendre à créer une interface utilisateur pour un programme lancé dans le terminal.","slug":"ft_select"},{"id":39,"kind":"project","name":"21sh","x":3000.0,"y":2350.0,"by":[{"parent_id":7,"points":[[3000,2550],[3000,2350]]}],"project_id":523,"difficulty":225,"duration":"about 14 days","rules":"You must not have validated ft_sh2 and ft_sh3. You must have validated 1 of minishell, first-internship, and startup-internship","description":"On passe aux choses sérieuses ! Avec 21sh, vous allez devoir écrire une implémentation proche de la réalité de la boucle read, eval, print d'un shell. A l'aide de la bibliothèque Termcaps, vous ajouterez une édition de ligne fonctionnelle et utile à la partie read de votre shell. Déplacements du curseur, édition, historique, multilignes, etc. Mais surtout pour la partie eval, oubliez la fonction ft_split que vous utilisiez dans votre Minishell pour découper la ligne de commande entrée par l'utilisateur !  21sh sera votre premier interprète réaliste, et en tant que tel, ce projet vous permettra de découvrir les analyses lexicale, syntaxique, et sémantique communes aux interprètes et aux compilateurs. Avec des structures de données et des traitements adaptées, ajouter la gestions des pipes (|) et des redirections (<, <<, >>. >) sera très simple !","slug":"21sh"},{"id":99,"kind":"project","name":"ft_printf","x":3201.0,"y":3000.0,"by":[{"parent_id":540,"points":[[3201,3000],[3008.5,2999.5]]}],"project_id":5,"difficulty":100,"duration":"about 7 days","rules":"You must have validated 2 of fillit, get_next_line, first-internship, and startup-internship","description":"Vous en avez assez de faire vos affichages en alternant ft_putstr et ft_putnbr ? Vous n'avez pas le droit d'utiliser printf ? Recodez le votre ! Ce sera l'occasion de découvrir une feature du C - les fonctions variadiques - et de vous entrainer à la gestion fine des options d'affichage. Vous aurez ensuite le droit d'utiliser votre printf dans tous vos projets ultérieurs.","slug":"ft_printf"},{"id":101,"kind":"project","name":"Filler","x":3364.0,"y":2869.0,"by":[{"parent_id":5,"points":[[3201,3001],[3364,2869]]}],"project_id":26,"difficulty":100,"duration":"about 7 days","rules":"You must have validated 1 of ft_printf, first-internship, and startup-internship","description":"Créez votre joueur pour affronter d’autres étudiants sur le célèbre (ou pas) plateau du Filler. Le principe est simple : deux joueurs s’affrontent sur un plateau, et doivent placer, tour à tour, la pièce que le maître du jeu (fourni sous la forme d’un exécutable Ruby) leur donne, gagnant ainsi des points. La partie s’arrête dès qu’une pièce ne peut plus être placée. Petit projet ludique !","slug":"filler"},{"id":102,"kind":"project","name":"Push_swap","x":3365.0,"y":3142.0,"by":[{"parent_id":5,"points":[[3201,3001],[3365,3142]]}],"project_id":27,"difficulty":100,"duration":"about 7 days","rules":"You must have validated 1 of ft_printf, first-internship, and startup-internship","description":"Ce projet vous demande de trier des données sur une pile, avec un set d’instructions limité, en moins de coups possibles. Pour le réussir, vous devrez manipuler différents algorithmes de tri et choisir la (ou les ?) solution la plus appropriée pour un classement optimisé des données.","slug":"push_swap"},{"id":103,"kind":"project","name":"Lem_in","x":3533.0,"y":2999.0,"by":[{"parent_id":727,"points":[[3334,2828],[3533,2999]]},{"parent_id":48,"points":[[3348,3168],[3533,2999]]},{"parent_id":22,"points":[[3533,2999],[3890.5,3000]]}],"project_id":29,"difficulty":225,"duration":"about 14 days","rules":"You must have validated 1 of push_swap, filler, first-internship, and startup-internship","description":"Votre colonie de fourmis doit se déplacer d'un point à un autre. Mais comment faire pour que cela prenne le moins de temps possible ? Ce projet vous fait découvrir les algorithmes de parcours de graphe : votre programme devra sélectionner intelligemment les chemins et les mouvements précis qui doivent être empruntés par ces fourmis.","slug":"lem_in"},{"id":107,"kind":"big_project","name":"42sh","x":3000.0,"y":2100.0,"by":[{"parent_id":523,"points":[[3000,2300],[3000,2100]]}],"project_id":35,"difficulty":375,"duration":"about 42 days","rules":"You must have validated 1 of 21sh, ft_sh3, first-internship, and startup-internship","description":"Ce projet consiste à créer de toutes pièces un shell complet, en reprenant le travail effectué sur votre 21sh. Un jeu minimum de fonctionnalités vous sont demandées, à partir duquel vous allez constuire votre propre shell abouti - en allant potentiellement jusqu'au job control et au shell script. Ce projet vous permet donc de voir ou revoir une très large palette des fonctionnalités UNIX (et POSIX) standard.","slug":"42sh"},{"id":185,"kind":"project","name":"GET_Next_Line","x":2792.0,"y":3001.0,"by":[{"parent_id":1,"points":[[2792,3001],[2552.5,2999.5]]}],"project_id":2,"difficulty":100,"duration":"about 7 days","rules":"You must have validated libft","description":"Qu'il s'agisse d'un fichier, de l'entrée standard, ou même plus tard d'une connexion réseau, vous aurez toujours besoin de lire du contenu ligne par ligne. Il est donc temps de vous attaquer à cette fonction, indispensable pour un certain nombre de vos prochains projets.","slug":"get_next_line"}]